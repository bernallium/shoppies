{"version":3,"sources":["components/MovieList/MovieList.js","components/Nominate/Nominate.js","App.js","reportWebVitals.js","index.js"],"names":["MovieList","movies","handleNominateClick","NominateComponent","nominations","map","movie","idx","className","Image","src","Poster","alt","Title","Year","imdbID","Nominate","Button","variant","disabled","some","nomination","onClick","App","useState","search","setSearch","setMovies","setNominations","showAlert","setShowAlert","useEffect","fetchMovies","checkNominationThreshold","localStorageNominations","JSON","parse","localStorage","getItem","a","url","fetch","response","json","responseJson","Search","length","saveToLocalStorage","setItem","stringify","Container","fluid","href","Form","onSubmit","e","preventDefault","Group","controlId","Label","Control","type","placeholder","size","value","onChange","target","Text","Alert","dismissible","onClose","renderAlert","Row","newNominationList","filteredNominations","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.034ba32b.chunk.js","sourcesContent":["import React from 'react';\nimport Image from 'react-bootstrap/Image';\n\nconst MovieList = ({movies, handleNominateClick, NominateComponent, nominations}) => {\n  return (\n    <>\n      {movies.map((movie, idx) => \n        <div key={movie.imdbID} \n          className={`movie ${idx===0 && nominations ? \"first-movie\" : \"\"}`}\n        > \n          <Image \n            src={movie.Poster} \n            alt='movie'\n            className=\"poster\"\n          />\n          <div className=\"d-flex flex-column justify-content-between m-2\">\n            <h6 className=\"movie-title\">\n              {movie.Title} ({movie.Year})\n            </h6>\n            <NominateComponent\n              movie={movie}\n              handleNominateClick={handleNominateClick}\n              nominations={nominations}\n            />\n          </div>\n        </div>\n      )}\n    </>\n  )\n}\n\nexport default MovieList;","import React from 'react';\nimport Button from 'react-bootstrap/Button';\n\nconst Nominate = ({movie, handleNominateClick, nominations}) => {\n  return (\n    <>\n      <Button\n        variant={nominations? 'primary' : 'danger'}\n        disabled={\n          nominations && nominations.some(nomination => nomination.imdbID === movie.imdbID)\n        }\n        onClick={() => handleNominateClick(movie)}\n      >\n        {nominations? 'Add to Nominations' : 'Remove'}\n      </Button>\n    </>\n  )\n}\n\nexport default Nominate;","import './App.css';\nimport React, { useState, useEffect } from 'react';\nimport MovieList from './components/MovieList/MovieList'\nimport Nominate from './components/Nominate/Nominate'\n\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Row from 'react-bootstrap/Row';\nimport Alert from 'react-bootstrap/Alert';\n\nfunction App() {\n  const [search, setSearch] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [nominations, setNominations] = useState([]);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const NOMINATION_THRESHOLD = 5;\n  \n  useEffect(() => { \n    fetchMovies(search);\n  }, [search]);\n\n  useEffect(() => {\n    checkNominationThreshold(nominations);\n  }, [nominations])\n\n  useEffect(() => {\n    const localStorageNominations = JSON.parse(localStorage.getItem('movie-nominations'));\n    if (localStorageNominations) {\n      setNominations(localStorageNominations);\n    }\n  }, [])\n\n  const handleChange = (e) => {\n    setSearch(e.target.value);\n  };\n  \n  const fetchMovies = async (search) => {\n    const url = `https://www.omdbapi.com/?type=movie&s=${search}&apikey=e5181cf5`\n    const response = await fetch(url); // http response\n    const responseJson = await response.json();\n    responseJson.Search? setMovies(responseJson.Search) : setMovies([]);\n  }\n\n  const checkNominationThreshold = (nominations) => {\n    if (nominations.length >= NOMINATION_THRESHOLD) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }\n\n  const nominateMovie = (movie) => {\n    const newNominationList = [...nominations, movie];\n    setNominations(newNominationList);\n    saveToLocalStorage(newNominationList);\n  }\n\n  const removeFromNominations = (movie) => { \n    const filteredNominations = nominations.filter(\n      nomination => nomination.imdbID !== movie.imdbID\n    );\n    setNominations(filteredNominations);\n  }\n\n  const saveToLocalStorage = (nominations) => {\n    localStorage.setItem('movie-nominations', JSON.stringify(nominations))\n  };\n\n  const renderAlert = () => {\n    if (showAlert) {\n      return (\n        <Alert \n          variant=\"primary\" \n          dismissible\n          size=\"sm\"\n          className=\"alert\"\n          onClose={() => setShowAlert(false)}\n        >\n        Thank you! {NOMINATION_THRESHOLD} movies have successfully been nominated! ü•≥\n        </Alert>\n      )\n    }\n  }\n\n  return (\n    <Container \n      className=\"App\"\n      fluid\n    >\n      <div className=\"header-container\">\n        <h1 className=\"app-header\">The Shoppies üèÜ</h1>\n        <p>A movie searching app powered by OMDB API, built with React</p>\n        <p>Add and remove movies to your Nominations list and have them saved to your local storage. Your list will persist across page refreshes!</p>\n        <a href=\"https://github.com/bernallium/shoppies\">github.com/bernallium/shoppies</a>\n      </div>\n      <Form\n        onSubmit={e => e.preventDefault()}\n        className=\"SearchForm\"\n      >\n        <Form.Group controlId=\"searchForm\">\n          <Form.Label>Search and nominate your favorite movies!</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Search by title\"\n            size=\"lg\"\n            value={search}\n            onChange={handleChange}\n          >\n          </Form.Control>\n          <Form.Text>\n            { movies.length && search ? `${movies.length} results for \"${search}\"` : \"\"}\n          </Form.Text>\n        </Form.Group>\n      </Form>\n      {renderAlert()}\n      <Row>\n        <MovieList \n          movies={movies}\n          handleNominateClick={nominateMovie}\n          NominateComponent={Nominate}\n          nominations={nominations}\n          className=\"row\"\n        />\n      </Row>\n      <h2>Your Nominations ({nominations.length}/5)</h2>\n      <Row>\n        <MovieList\n          movies={nominations}\n          handleNominateClick={removeFromNominations}\n          NominateComponent={Nominate}\n          className=\"row\"\n        />\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}